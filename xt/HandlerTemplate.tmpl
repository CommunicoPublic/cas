/*-
 * Copyright (c) 2005 - 2016 CAS Dev Team
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the CAS Dev. Team nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      <TMPL_var module_name>.hpp
 *
 * $CAS$
 */

#include "ASDebugHelper.hpp"
#include "ASLoadableObject.hpp"
#include "ASHandler.hpp"

using namespace CAS;

namespace CAS_MOD
{

/**
  @class <TMPL_var module_name>
  @brief Application server object
*/
class <TMPL_var module_name>:
  public ASHandler
{
public:
	/**
	  @brief A constructor
	*/
	<TMPL_var module_name>();

	/**
	  @brief A destructor
	*/
	~<TMPL_var module_name>() throw();

private:
	// Put your variables here
	//

	/**
	  @brief Initialize module
	  @param oConfiguration - module configuration
	  @param oModulesPool - pool of modules
	  @param oObjectPool - pool of objects
	  @param oLogger - logger object
	  @return 0 - if success, -1 - otherwise
	*/
	INT_32 InitModule(CTPP::CDT  & oConfiguration,
	                  ASPool     & oModulesPool,
	                  ASPool     & oObjectPool,
	                  ASLogger   & oLogger);

	/**
	  @brief Initialize server hook
	  @param oConfiguration - module configuration
	  @param oGlobalPool - pool of global objects
	  @param oServerPool - pool of per-server objects
	  @param oLogger - logger object
	  @return 0 - if success, -1 - otherwise
	*/
	INT_32 InitServer(CTPP::CDT  & oConfiguration,
	                  ASPool     & oGlobalPool,
	                  ASPool     & oServerPool,
	                  ASLogger   & oLogger);

	/**
	  @brief Initialize location
	  @param oGlobalPool - global pool of objects
	  @param oVhostPool - virtual host pool
	  @param oLocationConfig - handler configuration
	  @param pContextData - context data
	  @param oLogger - application server logger
	  @return HANDLER_OK - if success, HANDLER_ERROR - if any error occured
	*/
	INT_32 InitLocation(ASPool       & oGlobalPool,
	                    ASPool       & oVhostPool,
	                    CTPP::CDT    & oLocationConfig,
	                    ASObject   * & pContextData,
	                    ASLogger     & oLogger);

	/**
	  @brief Handle request
	  @param oData - data model
	  @param oRequest - request object
	  @param oResponse - response object
	  @param oGlobalPool - global pool of objects
	  @param oVhostPool - virtual host pool
	  @param oLocationConfig - location configuration
	  @param pContextData - context data object
	  @param oIMC - Inter-Module communication object
	  @param oLogger - application server logger
	  @return HANDLER_OK - if success, HANDLER_ERROR - if any error occured, HANDLER_DONE - if no futher processing need
	*/
	INT_32 Handler(CTPP::CDT   & oData,
	               ASRequest   & oRequest,
	               ASResponse  & oResponse,
	               ASPool      & oGlobalPool,
	               ASPool      & oVhostPool,
	               ASPool      & oRequestPool,
	               CTPP::CDT   & oLocationConfig,
	               ASObject    * pContextData,
	               CTPP::CDT   & oIMC,
	               ASLogger    & oLogger);

	/**
	  @brief Shutdown location hook
	  @param oGlobalPool - global pool of objects
	  @param oVhostPool - virtual host pool
	  @param oLocationConfig - handler configuration
	  @param pContextData - context data
	  @param oLogger - application server logger
	  @return HANDLER_OK - if success, HANDLER_ERROR - if any error occured
	*/
	INT_32 ShutdownLocation(ASPool       & oGlobalPool,
	                        ASPool       & oVhostPool,
	                        CTPP::CDT    & oLocationConfig,
	                        ASObject   * & pContextData,
	                        ASLogger     & oLogger);

	/**
	  @brief Post-execution fixup
	  @param oGlobalPool - global pool of objects
	  @param oVhostPool - virtual host pool
	  @param oRequestPool - requeset data pool
	  @param oLocationConfig - location configuration
	  @param pContextData - context data object
	  @param oIMC - Inter-Module communication object
	  @param oLogger - application server logger
	  @return HANDLER_OK - if success, HANDLER_ERROR - if any error occured, HANDLER_DONE - if no futher processing need
	*/
	INT_32 Fixup(ASPool     & oGlobalPool,
	             ASPool     & oVhostPool,
	             ASPool     & oRequestPool,
	             CTPP::CDT  & oLocationConfig,
	             ASObject   * pContextData,
	             CTPP::CDT  & oIMC,
	             ASLogger   & oLogger);

	/**
	  @brief Shutdown server hook
	  @param oConfiguration - module configuration
	  @param oGlobalPool - pool of global objects
	  @param oServerPool - pool of per-server objects
	  @param oLogger - logger object
	  @return 0 - if success, -1 - otherwise
	*/
	INT_32 ShutdownServer(CTPP::CDT  & oConfiguration,
	                      ASPool     & oGlobalPool,
	                      ASPool     & oServerPool,
	                      ASLogger   & oLogger);

	/**
	  @brief Shutdown module
	  @param oConfiguration - module configuration
	  @param oModulesPool - pool of modules
	  @param oGlobalPool - global pool of objects
	  @param oLogger - logger object
	  @return 0 - if success, -1 - otherwise
	*/
	INT_32 ShutdownModule(CTPP::CDT  & oConfiguration,
	                      ASPool     & oModulesPool,
	                      ASPool     & oGlobalPool,
	                      ASLogger   & oLogger);

	/**
	  @brief Get handler name
	*/
	CCHAR_P GetObjectName() const;
};

EXPORT_HANDLER(<TMPL_var module_name>)

//
// A constructor
//
<TMPL_var module_name>::<TMPL_var module_name>()
{
	;;
}

//
// Initialize module
//
INT_32 <TMPL_var module_name>::InitModule(CTPP::CDT  & oConfiguration,
                                    ASPool     & oModulesPool,
                                    ASPool     & oObjectPool,
                                    ASLogger   & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::InitModule");

return HANDLER_OK;
}

//
// Initialize server hook
//
INT_32 <TMPL_var module_name>::InitServer(CTPP::CDT  & oConfiguration,
                                    ASPool     & oGlobalPool,
                                    ASPool     & oServerPool,
                                    ASLogger   & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::InitServer");

return HANDLER_OK;
}

//
// Initialize handler by location
//
INT_32 <TMPL_var module_name>::InitLocation(ASPool       & oGlobalPool,
                                            ASPool       & oVhostPool,
                                            CTPP::CDT    & oLocationConfig,
                                            ASObject   * & pContextData,
                                            ASLogger     & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::InitLocation");

return HANDLER_OK;
}

//
// Handle request
//
INT_32 <TMPL_var module_name>::Handler(CTPP::CDT   & oData,
                                 ASRequest   & oRequest,
                                 ASResponse  & oResponse,
                                 ASPool      & oGlobalPool,
                                 ASPool      & oVhostPool,
                                 ASPool      & oRequestPool,
                                 CTPP::CDT   & oLocationConfig,
                                 ASObject    * pContextData,
                                 CTPP::CDT   & oIMC,
                                 ASLogger    & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::Handler");

	// 200 OK
	oResponse.SetHTTPCode(200);

	// Set HTTP header
	// oResponse.SetHeader("X-Module", "<TMPL_var module_name>");

	// Put your code here
	//
	//

return HANDLER_OK;
}

//
// location hook
//
INT_32 <TMPL_var module_name>::ShutdownLocation(ASPool       & oGlobalPool,
                        ASPool       & oVhostPool,
                        CTPP::CDT    & oLocationConfig,
                        ASObject   * & pContextData,
                        ASLogger     & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::ShutdownLocation");

return HANDLER_OK;
}

//
// Post-execution fixup
//
INT_32 <TMPL_var module_name>::Fixup(ASPool      & oGlobalPool,
                               ASPool      & oVhostPool,
                               ASPool      & oRequestPool,
                               CTPP::CDT   & oLocationConfig,
                               ASObject    * pContextData,
                               CTPP::CDT   & oIMC,
                               ASLogger    & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::Fixup");

return HANDLER_OK;
}

//
// Shutdown server hook
//
INT_32 <TMPL_var module_name>::ShutdownServer(CTPP::CDT  & oConfiguration,
                               ASPool     & oGlobalPool,
                               ASPool     & oServerPool,
                               ASLogger   & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::ShutdownServer");

return HANDLER_OK;
}

//
// Shutdown module
//
INT_32 <TMPL_var module_name>::ShutdownModule(CTPP::CDT  & oConfiguration,
                               ASPool     & oModulesPool,
                               ASPool     & oGlobalPool,
                               ASLogger   & oLogger)
{
	DEBUG_HELPER(&oLogger, "<TMPL_var module_name>::ShutdownModule");

return HANDLER_OK;
}

//
// Get handler name
//
CCHAR_P <TMPL_var module_name>::GetObjectName() const { return "<TMPL_var module_name>"; }

//
// A destructor
//
<TMPL_var module_name>::~<TMPL_var module_name>() throw()
{
	;;
}

} // namespace CAS_MOD
// End.

